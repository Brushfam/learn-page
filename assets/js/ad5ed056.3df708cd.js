"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[650],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=u(t),b=a,f=l["".concat(c,".").concat(b)]||l[b]||m[b]||o;return t?r.createElement(f,s(s({ref:n},p),{},{components:t})):r.createElement(f,s({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=b;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},2896:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:3,title:"PSP22 Burnable"},s=void 0,i={unversionedId:"OpenBrush/smart-contracts/PSP22/Extensions/burnable",id:"OpenBrush/smart-contracts/PSP22/Extensions/burnable",title:"PSP22 Burnable",description:"This example shows how you can reuse the implementation of",source:"@site/docs/OpenBrush/smart-contracts/PSP22/Extensions/burnable.md",sourceDirName:"OpenBrush/smart-contracts/PSP22/Extensions",slug:"/OpenBrush/smart-contracts/PSP22/Extensions/burnable",permalink:"/docs/OpenBrush/smart-contracts/PSP22/Extensions/burnable",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"PSP22 Burnable"},sidebar:"tutorialSidebar",previous:{title:"PSP22 Mintable",permalink:"/docs/OpenBrush/smart-contracts/PSP22/Extensions/mintable"},next:{title:"PSP22 Wrapper",permalink:"/docs/OpenBrush/smart-contracts/PSP22/Extensions/wrapper"}},c={},u=[{value:"How to use this extension",id:"how-to-use-this-extension",level:2},{value:"Final code",id:"final-code",level:2}],p={toc:u},l="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp22"},"PSP22")," token with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp22/extensions/burnable.rs"},"PSP22Burnable")," extension."),(0,a.kt)("h2",{id:"how-to-use-this-extension"},"How to use this extension"),(0,a.kt)("p",null,"First, you should implement basic version of ",(0,a.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/PSP22/"},"PSP22"),"."),(0,a.kt)("p",null,"After you can just add implementation of PSP22Burnable via ",(0,a.kt)("inlineCode",{parentName:"p"},"#[openbrush::implementation(PSP22Burnable)]")," attribute."),(0,a.kt)("h2",{id:"final-code"},"Final code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP22, PSP22Burnable)]\n#[openbrush::contract]\npub mod my_psp22_burnable {\n    use openbrush::traits::Storage;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        psp22: psp22::Data,\n    }\n\n    impl Contract {\n        #[ink(constructor)]\n        pub fn new(total_supply: Balance) -> Self {\n            let mut instance = Self::default();\n\n            psp22::Internal::_mint_to(&mut instance, Self::env().caller(), total_supply).expect("Should mint");\n\n            instance\n        }\n\n        #[ink(message)]\n        pub fn burn_from_many(&mut self, accounts: Vec<(AccountId, Balance)>) -> Result<(), PSP22Error> {\n            for account in accounts.iter() {\n                PSP22Burnable::burn(self, account.0, account.1)?;\n            }\n            Ok(())\n        }\n    }\n}\n')),(0,a.kt)("p",null,"And that's it! Your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," is now extended by the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22Burnable")," extension and ready to use its functions!\nYou can check an example of the usage of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/examples/psp22_extensions/burnable"},"PSP22 Burnable"),"."))}m.isMDXComponent=!0}}]);