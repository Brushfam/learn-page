"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[2241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),i=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=i(n),f=o,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||a;return n?r.createElement(d,c(c({ref:t},u),{},{components:n})):r.createElement(d,c({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,c[1]=s;for(var i=2;i<a;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1,title:"Access Control"},c=void 0,s={unversionedId:"OpenBrush/smart-contracts/access-control/access-control",id:"OpenBrush/smart-contracts/access-control/access-control",title:"Access Control",description:"This example shows how you can use the implementation of access-control to provide rights for usage of specific smart contract functions.",source:"@site/docs/OpenBrush/smart-contracts/access-control/access-control.md",sourceDirName:"OpenBrush/smart-contracts/access-control",slug:"/OpenBrush/smart-contracts/access-control/",permalink:"/docs/OpenBrush/smart-contracts/access-control/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Access Control"},sidebar:"tutorialSidebar",previous:{title:"Upgradeable contract",permalink:"/docs/OpenBrush/smart-contracts/upgradeable"},next:{title:"AccessControl Enumerable",permalink:"/docs/OpenBrush/smart-contracts/access-control/Extensions/enumerable"}},l={},i=[{value:"Step 1: Import default implementation",id:"step-1-import-default-implementation",level:2},{value:"Step 2: Define constructor",id:"step-2-define-constructor",level:2},{value:"Step 3: Customize your contract",id:"step-3-customize-your-contract",level:2}],u={toc:i},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This example shows how you can use the implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/access/access_control"},"access-control")," to provide rights for usage of specific smart contract functions."),(0,o.kt)("h2",{id:"step-1-import-default-implementation"},"Step 1: Import default implementation"),(0,o.kt)("p",null,"With ",(0,o.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/overview/#the-default-toml-of-your-project-with-openbrush"},"default ",(0,o.kt)("inlineCode",{parentName:"a"},"Cargo.toml")),",\nyou need to enable ",(0,o.kt)("inlineCode",{parentName:"p"},"access-control")," feature, embed modules data structures and implement them via ",(0,o.kt)("inlineCode",{parentName:"p"},"#[openbrush::implementation]")," macro\nas described in ",(0,o.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/overview/#reuse-implementation-of-traits-from-openbrush"},"that section"),"."),(0,o.kt)("p",null,"The main trait is ",(0,o.kt)("inlineCode",{parentName:"p"},"AccessControl"),"."),(0,o.kt)("h2",{id:"step-2-define-constructor"},"Step 2: Define constructor"),(0,o.kt)("p",null,"Define constructor where you grant ",(0,o.kt)("inlineCode",{parentName:"p"},"MINTER")," role(or any another role) to the caller."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'// You can manually set the number for the role.\n// But better to use a hash of the variable name.\n// It will generate a unique identifier of this role.\n// And will reduce the chance to have overlapping roles.\nconst MINTER: RoleType = ink::selector_id!("MINTER");\n\nimpl Contract {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        let mut instance = Self::default();\n\n        let caller = instance.env().caller();\n        access_control::Internal::_init_with_admin(&mut instance, Some(caller));\n        // We grant minter role to caller in constructor, so he can mint/burn tokens\n        AccessControl::grant_role(&mut instance, MINTER, Some(caller)).expect("Should grant MINTER role");\n\n        instance\n    }\n}\n')),(0,o.kt)("h2",{id:"step-3-customize-your-contract"},"Step 3: Customize your contract"),(0,o.kt)("p",null,"Customize it by adding access control logic. We will add a ",(0,o.kt)("inlineCode",{parentName:"p"},"restricted_function")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," implementation,\nwhich will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"only_role")," modifier with ",(0,o.kt)("inlineCode",{parentName:"p"},"MINTER")," parameter, which verifies that the caller has the ",(0,o.kt)("inlineCode",{parentName:"p"},"MINTER")," role."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP34, PSP34Burnable, PSP34Mintable, AccessControl)]\n#[openbrush::contract]\npub mod my_access_control {\n    use openbrush::{\n        modifiers,\n        traits::Storage,\n    };\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        psp34: psp34::Data,\n        #[storage_field]\n        access: access_control::Data,\n    }\n\n    // You can manually set the number for the role.\n    // But better to use a hash of the variable name.\n    // It will generate a unique identifier of this role.\n    // And will reduce the chance to have overlapping roles.\n    const MINTER: RoleType = ink::selector_id!("MINTER");\n\n    #[default_impl(PSP34Burnable)]\n    #[modifiers(only_role(MINTER))]\n    fn burn() {}\n\n    #[default_impl(PSP34Mintable)]\n    #[modifiers(only_role(MINTER))]\n    fn mint() {}\n\n    impl Contract {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            let mut instance = Self::default();\n\n            let caller = instance.env().caller();\n            access_control::Internal::_init_with_admin(&mut instance, Some(caller));\n            // We grant minter role to caller in constructor, so he can mint/burn tokens\n            AccessControl::grant_role(&mut instance, MINTER, Some(caller)).expect("Should grant MINTER role");\n\n            instance\n        }\n    }\n}\n\n')),(0,o.kt)("p",null,"You can check an example of the usage of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/examples/access_control"},"Access Control"),"."))}m.isMDXComponent=!0}}]);