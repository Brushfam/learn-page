"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[1443],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},P=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),P=r,d=u["".concat(i,".").concat(P)]||u[P]||m[P]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=P;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}P.displayName="MDXCreateElement"},6734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2,title:"PSP22 Pallet Mintable"},s=void 0,l={unversionedId:"OpenBrush/smart-contracts/PSP22-Pallet/Extensions/mintable",id:"OpenBrush/smart-contracts/PSP22-Pallet/Extensions/mintable",title:"PSP22 Pallet Mintable",description:"This example shows how you can reuse the implementation of",source:"@site/docs/OpenBrush/smart-contracts/PSP22-Pallet/Extensions/mintable.md",sourceDirName:"OpenBrush/smart-contracts/PSP22-Pallet/Extensions",slug:"/OpenBrush/smart-contracts/PSP22-Pallet/Extensions/mintable",permalink:"/docs/OpenBrush/smart-contracts/PSP22-Pallet/Extensions/mintable",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"PSP22 Pallet Mintable"},sidebar:"tutorialSidebar",previous:{title:"PSP22 Pallet Metadata",permalink:"/docs/OpenBrush/smart-contracts/PSP22-Pallet/Extensions/metadata"},next:{title:"PSP22 Pallet Burnable",permalink:"/docs/OpenBrush/smart-contracts/PSP22-Pallet/Extensions/burnable"}},i={},c=[{value:"How to use this extension",id:"how-to-use-this-extension",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This example shows how you can reuse the implementation of\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp22_pallet"},"PSP22 Pallet")," token with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp22_pallet/extensions/mintable.rs"},"PSP22Mintable")," extension via ",(0,r.kt)("inlineCode",{parentName:"p"},"pallet-assets")," chain extension."),(0,r.kt)("h2",{id:"how-to-use-this-extension"},"How to use this extension"),(0,r.kt)("p",null,"First, you should implement basic version of ",(0,r.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/PSP22-Pallet/"},"PSP22 Pallet"),"."),(0,r.kt)("p",null,"After you can just add implementation of PSP22PalletMintable via ",(0,r.kt)("inlineCode",{parentName:"p"},"#[openbrush::implementation(PSP22PalletMintable)]")," attribute."),(0,r.kt)("h1",{id:"final-code"},"Final code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP22Pallet, PSP22PalletMintable)]\n#[openbrush::contract]\npub mod my_psp22_pallet_mintable {\n    use openbrush::traits::Storage;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        pallet: psp22_pallet::Data,\n    }\n\n    impl Contract {\n        /// During instantiation of the contract, you need to pass native tokens as a deposit\n        /// for asset creation.\n        #[ink(constructor)]\n        #[ink(payable)]\n        pub fn new(asset_id: u32, min_balance: Balance, total_supply: Balance) -> Self {\n            let mut instance = Self::default();\n            let caller = instance.env().caller();\n\n            psp22_pallet::Internal::_create(&mut instance, asset_id, Self::env().account_id(), min_balance)\n                .expect("Should create an asset");\n            instance.pallet.asset_id.set(&asset_id);\n            instance.pallet.origin.set(&Origin::Caller);\n            psp22_pallet::Internal::_mint_to(&mut instance, caller, total_supply).expect("Should mint_to");\n\n            instance\n        }\n    }\n}\n')),(0,r.kt)("p",null,"And that's it! Your ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22 Pallet")," is now extended by the ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP22Mintable")," extension and ready to use its functions!"))}m.isMDXComponent=!0}}]);