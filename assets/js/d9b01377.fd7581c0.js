"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[6452],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:6,title:"PSP22 Capped"},i=void 0,s={unversionedId:"OpenBrush/smart-contracts/PSP22/Extensions/capped",id:"OpenBrush/smart-contracts/PSP22/Extensions/capped",title:"PSP22 Capped",description:"This example shows how you can reuse the implementation of PSP22 token with the PSP22Capped extension.",source:"@site/docs/OpenBrush/smart-contracts/PSP22/Extensions/capped.md",sourceDirName:"OpenBrush/smart-contracts/PSP22/Extensions",slug:"/OpenBrush/smart-contracts/PSP22/Extensions/capped",permalink:"/docs/OpenBrush/smart-contracts/PSP22/Extensions/capped",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"PSP22 Capped"},sidebar:"tutorialSidebar",previous:{title:"PSP22 FlashMint",permalink:"/docs/OpenBrush/smart-contracts/PSP22/Extensions/flashmint"},next:{title:"PSP22 Token Timelock",permalink:"/docs/OpenBrush/smart-contracts/PSP22/Utils/token-timelock"}},p={},c=[{value:"Step 1: Add imports and enable unstable feature",id:"step-1-add-imports-and-enable-unstable-feature",level:2},{value:"Step 2: Define storage",id:"step-2-define-storage",level:2},{value:"Step 3: Inherit logic",id:"step-3-inherit-logic",level:2},{value:"Step 4: Define constructor",id:"step-4-define-constructor",level:2},{value:"Final code",id:"final-code",level:2}],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp22"},"PSP22")," token with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp22/extensions/capped.rs"},"PSP22Capped")," extension."),(0,a.kt)("p",null,"First, you should implement basic version of ",(0,a.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/PSP22/"},"PSP22"),"."),(0,a.kt)("h2",{id:"step-1-add-imports-and-enable-unstable-feature"},"Step 1: Add imports and enable unstable feature"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"openbrush::contract")," macro instead of ",(0,a.kt)("inlineCode",{parentName:"li"},"ink::contract"),"."),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"openbrush::implementation")," macro to inherit implementations of ",(0,a.kt)("inlineCode",{parentName:"li"},"PSP22")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"PSP22Capped")," traits.")),(0,a.kt)("h2",{id:"step-2-define-storage"},"Step 2: Define storage"),(0,a.kt)("p",null,"Declare storage struct and declare the field related to the capped module data structure.\nThen you need to derive the ",(0,a.kt)("inlineCode",{parentName:"p"},"Storage")," trait and mark the corresponding field with\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"#[storage_field]")," attribute. Deriving this trait allows you to reuse the\n",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22Capped")," extension in your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, Storage)]\npub struct Contract {\n    ...\n    #[storage_field]\n    cap: capped::Data,\n}\n")),(0,a.kt)("h2",{id:"step-3-inherit-logic"},"Step 3: Inherit logic"),(0,a.kt)("p",null,"You can customize (override) methods using ",(0,a.kt)("inlineCode",{parentName:"p"},"#[overrider]")," attribute."),(0,a.kt)("p",null,"Override ",(0,a.kt)("inlineCode",{parentName:"p"},"psp22::Transfer")," to check is the cap exceeded before minting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[overrider(psp22::Internal)]\nfn _before_token_transfer(\n    &mut self,\n    from: Option<&AccountId>,\n    _: Option<&AccountId>,\n    amount: &Balance,\n) -> Result<(), PSP22Error> {\n    // `is_none` means that it is minting\n    if from.is_none() && capped::Internal::_is_cap_exceeded(self, amount) {\n        return Err(PSP22Error::Custom(String::from("Cap exceeded")))\n    }\n    Ok(())\n}\n')),(0,a.kt)("h2",{id:"step-4-define-constructor"},"Step 4: Define constructor"),(0,a.kt)("p",null,"Define constructor. Your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22Capped")," contract is ready!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl Contract {\n    /// Constructor which mints `initial_supply` of the token to sender\n    /// Will set the token's cap to `cap`\n    #[ink(constructor)]\n    pub fn new(inital_supply: Balance, cap: Balance) -> Self {\n        let mut instance = Self::default();\n\n        assert!(capped::Internal::_init_cap(&mut instance, cap).is_ok());\n        assert!(PSP22Mintable::mint(&mut instance, Self::env().caller(), inital_supply).is_ok());\n\n        instance\n    }\n}\n")),(0,a.kt)("h2",{id:"final-code"},"Final code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP22, PSP22Capped, PSP22Mintable)]\n#[openbrush::contract]\npub mod my_psp22_capped {\n    use openbrush::traits::{\n        Storage,\n        String,\n    };\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        psp22: psp22::Data,\n        #[storage_field]\n        cap: capped::Data,\n    }\n\n    #[overrider(psp22::Internal)]\n    fn _before_token_transfer(\n        &mut self,\n        from: Option<&AccountId>,\n        _: Option<&AccountId>,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        // `is_none` means that it is minting\n        if from.is_none() && capped::Internal::_is_cap_exceeded(self, amount) {\n            return Err(PSP22Error::Custom(String::from("Cap exceeded")))\n        }\n        Ok(())\n    }\n\n    impl Contract {\n        /// Constructor which mints `initial_supply` of the token to sender\n        /// Will set the token\'s cap to `cap`\n        #[ink(constructor)]\n        pub fn new(inital_supply: Balance, cap: Balance) -> Self {\n            let mut instance = Self::default();\n\n            assert!(capped::Internal::_init_cap(&mut instance, cap).is_ok());\n            assert!(PSP22Mintable::mint(&mut instance, Self::env().caller(), inital_supply).is_ok());\n\n            instance\n        }\n    }\n}\n')),(0,a.kt)("p",null,"You can check an implementation example of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/examples/psp22_extensions/capped"},"PSP22 Capped"),"."))}d.isMDXComponent=!0}}]);