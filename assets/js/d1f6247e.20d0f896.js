"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[3374],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),s=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(l.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=s(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(g,c(c({ref:e},p),{},{components:n})):a.createElement(g,c({ref:e},p))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i[u]="string"==typeof t?t:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:6,slug:"/cargo-contract",title:"cargo-contract",sidebar_label:"cargo-contract"},c="cargo-contract",i={unversionedId:"cargo-contract",id:"cargo-contract",title:"cargo-contract",description:"cargo-contract is a unified CLI tool to develop and deploy ink! smart contracts.",source:"@site/docs/cargo-contract.md",sourceDirName:".",slug:"/cargo-contract",permalink:"/docs/cargo-contract",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,slug:"/cargo-contract",title:"cargo-contract",sidebar_label:"cargo-contract"},sidebar:"tutorialSidebar",previous:{title:"OBCE",permalink:"/docs/obce"},next:{title:"substrate-contracts-node",permalink:"/docs/substrate-contracts-node"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Deployment",id:"deployment",level:2}],p={toc:s},u="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cargo-contract"},"cargo-contract"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract")," is a unified CLI tool to develop and deploy ink! smart contracts."),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract"),", you can create new contracts, check and build existing ones and interact with uploaded contracts on-chain."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"To start using ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract"),", ensure that you have your Rust toolchain installed. If you don't have an installed Rust toolchain, you can use ",(0,r.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"Rustup")," to install one."),(0,r.kt)("p",null,"Besides using Rust toolchain, ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract")," requires a C++ compiler installed. You can use any modern version of GCC, Clang or MSVC."),(0,r.kt)("p",null,"After that, you can install ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract")," using the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"rustup component add rust-src")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"cargo install --force --locked cargo-contract"))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To create a new contract use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo contract new")," subcommand: ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo contract new my_contract")),(0,r.kt)("p",null,"After that, a new directory with the name ",(0,r.kt)("inlineCode",{parentName:"p"},"my_contract")," will be created, with the sample contract inside of it."),(0,r.kt)("p",null,"To build this sample contract, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo contract build")," command. This command automatically invokes Cargo, Rust's package manager with the necessary parameters to produce WASM blob. After generating WASM code, some ink!-specific optimizations are also applied automatically."),(0,r.kt)("h2",{id:"deployment"},"Deployment"),(0,r.kt)("p",null,"Assuming your build process was a success, we can proceed with uploading your code."),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo contract upload")," subcommand, we can upload WASM blob to the specified chain (local development chain by default): ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo contract upload --suri //Alice"),'. In this case, we are using "Alice" test identity.'),(0,r.kt)("p",null,"After running the ",(0,r.kt)("inlineCode",{parentName:"p"},"upload")," subcommand, ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract")," provides us with the code hash, which we can use to instantiate our smart contract."),(0,r.kt)("p",null,'Smart contract instantiation is required to "initialize" our contract by calling its constructor method:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cargo contract instantiate \\\n       --constructor new \\\n       --args false \\\n       --suri //Alice \\\n       --code-hash 0xABC...\n")),(0,r.kt)("p",null,"After that, ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract")," provides us with the contract address, which we can use to call smart contract methods using the ",(0,r.kt)("inlineCode",{parentName:"p"},"call")," subcommand:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cargo contract call \\\n       --contract 0x123... \\\n       --message hello \\\n       --suri //Alice\n")))}d.isMDXComponent=!0}}]);