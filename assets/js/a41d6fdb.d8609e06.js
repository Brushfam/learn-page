"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[5195],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:2,slug:"/from-solidity-to-ink",title:"Transpiling solidity smart contract with Sol2ink",sidebar_label:"Transpiling solidity smart contract with Sol2ink"},i="Transpiling solidity smart contract with Sol2ink",l={unversionedId:"from-solidity-to-ink",id:"from-solidity-to-ink",title:"Transpiling solidity smart contract with Sol2ink",description:"Probably you heard about advantages WASM smart contracts",source:"@site/tutorials/from-solidity-to-ink.md",sourceDirName:".",slug:"/from-solidity-to-ink",permalink:"/tutorials/from-solidity-to-ink",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/from-solidity-to-ink",title:"Transpiling solidity smart contract with Sol2ink",sidebar_label:"Transpiling solidity smart contract with Sol2ink"},sidebar:"tutorialSidebar",previous:{title:"Creating smart contract using OpenBrush",permalink:"/tutorials/smart-contract-openbrush"}},s={},c=[{value:"Installation",id:"installation",level:3},{value:"Transpiling",id:"transpiling",level:3},{value:"Add new logic",id:"add-new-logic",level:3}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transpiling-solidity-smart-contract-with-sol2ink"},"Transpiling solidity smart contract with Sol2ink"),(0,o.kt)("p",null,"Probably you heard about ",(0,o.kt)("a",{parentName:"p",href:"https://use.ink/why-webassembly-for-smart-contracts"},"advantages WASM smart contracts"),"\nand if you are working with EVM you may be interested in how to rewrite your project written with solidity\nto Rust and ink!"),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)("p",null,"First what you need is, of course, ",(0,o.kt)("a",{parentName:"p",href:"/docs/Sol2ink"},"Sol2ink")," tool. You can use binary from release.\nMove that file to folder that contains solidity smart contract and use ",(0,o.kt)("inlineCode",{parentName:"p"},"./sol2ink Contract.sol")," command.\nOr you can clone ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/sol2ink"},"repository")," and work inside Sol2ink project. We will work in this way."),(0,o.kt)("h3",{id:"transpiling"},"Transpiling"),(0,o.kt)("p",null,"Take a look on code below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n\ncontract Owner {\n\n    address private owner;\n\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n\n    constructor() {\n        console.log("Owner contract deployed by:", msg.sender);\n        owner = msg.sender; \n        emit OwnerSet(address(0), owner);\n    }\n\n    function changeOwner(address newOwner) public {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n} \n')),(0,o.kt)("p",null,"It's simple solidity contract that stores owner's address, allows to change this address and return it.\nTo transpile it, we need to run a command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cargo +nightly run Contract.sol\n")),(0,o.kt)("p",null,"After this, you can see that ",(0,o.kt)("inlineCode",{parentName:"p"},"generated")," folder has been created. Here you can find ",(0,o.kt)("inlineCode",{parentName:"p"},"contract"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder. More about structure you can read ",(0,o.kt)("a",{parentName:"p",href:"/docs/Sol2ink/capabilities"},"here"),"."),(0,o.kt)("h3",{id:"add-new-logic"},"Add new logic"),(0,o.kt)("p",null,"If you want to add extra functionality to your generated project, you need go to ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder and\nwork with ",(0,o.kt)("inlineCode",{parentName:"p"},"traits")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"impls")," folders. Let's add to our contract function for reset owner role.\nIt will set ",(0,o.kt)("inlineCode",{parentName:"p"},"owner")," to zero address and will emit event after. In ",(0,o.kt)("inlineCode",{parentName:"p"},"traits/contract.rs")," you\nhave trait definition. We can declare new method here:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[openbrush::trait_definition]\npub trait Owner {\n    #[ink(message)]\n    fn change_owner(&mut self, new_owner: AccountId) -> Result<(), Error>;\n\n    #[ink(message)]\n    fn get_owner(&self) -> Result<AccountId, Error>;\n\n    // new method\n    #[ink(message)]\n    fn renounce_ownership(&mut self) -> Result<(), Error>;\n}\n")),(0,o.kt)("p",null,"We need use ",(0,o.kt)("inlineCode",{parentName:"p"},"mut")," because we will change storage value ",(0,o.kt)("inlineCode",{parentName:"p"},"owner"),". Also, this function have\n",(0,o.kt)("a",{parentName:"p",href:"https://use.ink/macros-attributes/message"},"message attribute")," as it's public."),(0,o.kt)("p",null,"Our next step is to write implementation for this function and for renounce event. For it we\nneed to change trait implementation in ",(0,o.kt)("inlineCode",{parentName:"p"},"impls/contract.rs")," and add this function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn renounce_ownership(&mut self) -> Result<(), Error> {\n        let old_owner = self.data().owner.clone();\n        self.data().owner = ZERO_ADDRESS.into();\n        self._emit_renounce_ownership_event(old_owner);\n        Ok(())\n    }\n")),(0,o.kt)("p",null,"For now ",(0,o.kt)("inlineCode",{parentName:"p"},"_emit_renounce_ownership_event")," doesn't exist, so let's create it. You can see that\n",(0,o.kt)("inlineCode",{parentName:"p"},"impls/contract.rs")," have one more trait implementation. We use ",(0,o.kt)("inlineCode",{parentName:"p"},"Internal")," trait for\nevent declaration. Final ",(0,o.kt)("inlineCode",{parentName:"p"},"Internal")," trait code will have default event implementation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Internal {\n    fn _emit_owner_set(&self, old_owner: AccountId, new_owner: AccountId);\n\n    fn _emit_renounce_ownership_event(&self, old_owner: AccountId);\n\n}\n\nimpl<T: Storage<Data>> Internal for T {\n    default fn _emit_owner_set(&self, _: AccountId, _: AccountId) {}\n\n    default fn _emit_renounce_ownership_event(&self, _: AccountId) {}\n}\n")),(0,o.kt)("p",null,"If you want to override event default behavior, you can open ",(0,o.kt)("inlineCode",{parentName:"p"},"contracts/contract/lib.rs"),"\nand add some logic in ",(0,o.kt)("inlineCode",{parentName:"p"},"Internal")," implementation for ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn _emit_renounce_ownership_event(&self, old_owner: AccountId) {\n    self.env().emit_event(ContractSet {\n        old_owner,\n        ZERO_ADDRESS,\n    });\n}\n")),(0,o.kt)("p",null,"We\u2019re done! Now you know how to transpile contracts with Sol2ink, what project structure it uses\nand how work with project after transpiling."),(0,o.kt)("p",null,"If you have question or something went wrong, feel free to share it in our ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/9FRETSPmp9"},"discord"),"."))}u.isMDXComponent=!0}}]);