"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[6388],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1,title:"Overview"},i="Typechain-polkadot",l={unversionedId:"Typechain/typechain-polkadot/overview",id:"Typechain/typechain-polkadot/overview",title:"Overview",description:"---",source:"@site/docs/Typechain/typechain-polkadot/overview.md",sourceDirName:"Typechain/typechain-polkadot",slug:"/Typechain/typechain-polkadot/overview",permalink:"/docs/Typechain/typechain-polkadot/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"How to use",permalink:"/docs/Typechain"},next:{title:"build-extrinsic",permalink:"/docs/Typechain/typechain-polkadot/Plugins/build-extrinsic"}},s={},c=[{value:"Usage",id:"usage",level:2},{value:"CLI tool",id:"cli-tool",level:3},{value:"Methods and namespaces used in the typechain, and their description",id:"methods-and-namespaces-used-in-the-typechain-and-their-description",level:2},{value:"build-extrinsic",id:"build-extrinsic",level:3},{value:"constructors",id:"constructors",level:3},{value:"contract",id:"contract",level:3},{value:"data",id:"data",level:3},{value:"mixed-methods",id:"mixed-methods",level:3},{value:"query",id:"query",level:3},{value:"tx-sign-and-send",id:"tx-sign-and-send",level:3},{value:"Library",id:"library",level:3},{value:"Plugins",id:"plugins",level:2},{value:"Example of plugins usage",id:"example-of-plugins-usage",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typechain-polkadot"},"Typechain-polkadot"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Package for generating TypeScript definitions & runtime code for Polkadot smart contracts."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"In your project install this package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D @727-ventures/typechain-polkadot\n")),(0,o.kt)("p",null,"Now you can use it to generate TS definitions & runtime code for Polkadot smart contracts. To use typechain-polkadot."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note, that ink! contracts generate two files: ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<contract-name>.contract"),". You need to provide both of them to typechain-polkadot, and rename ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.json")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"<contract-name>.json"),".")),(0,o.kt)("p",null,"Typechain can be used in two ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As a CLI tool"),(0,o.kt)("li",{parentName:"ul"},"As a library")),(0,o.kt)("h3",{id:"cli-tool"},"CLI tool"),(0,o.kt)("p",null,"After installing the package, you can use it as a CLI tool. To use it, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx @727-ventures/typechain-polkadot --input path/to/abis --output path/to/output\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"methods-and-namespaces-used-in-the-typechain-and-their-description"},"Methods and namespaces used in the typechain, and their description"),(0,o.kt)("h3",{id:"build-extrinsic"},"build-extrinsic"),(0,o.kt)("p",null,"In this namespace you can find all the functions that are related to building extrinsics."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const tx = contract.buildExtrinsic.<methodName>(...args, options);\n\ntx.signAndSend(account, (result) => {\n    // Handle result\n});\n")),(0,o.kt)("h3",{id:"constructors"},"constructors"),(0,o.kt)("p",null,"Used to deploy contracts, using different constructors."),(0,o.kt)("p",null,"Let's deploy the following contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[openbrush::contract]\npub mod my_psp22 {\n\n    // imports from openbrush\n    use openbrush::contracts::psp22::*;\n    use openbrush::traits::Storage;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        psp22: psp22::Data,\n    }\n\n    // Section contains default implementation without any modifications\n    impl PSP22 for Contract {}\n\n    impl Contract {\n        #[ink(constructor)]\n        pub fn new(initial_supply: Balance) -> Self {\n            let mut _instance = Self::default();\n            _instance._mint_to(_instance.env().caller(), initial_supply).expect("Should mint");\n            _instance\n        }\n    }\n}\n')),(0,o.kt)("p",null,"This contract has a constructor ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," with one argument ",(0,o.kt)("inlineCode",{parentName:"p"},"initial_supply"),".\nTo deploy this contract, you need to use the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Import here Constructors and Contract classes\n\n// Here we are creating an instance of the Constructors class, which is used to deploy contracts,\n// Constructors is typechain-generated class that contains all the constructors of the contract\nconst factory = new Constructors(api, UserAlice);\n\n// You can access to the different constructors using the name of the constructor, here we will use \"new\"\nconst {result, address} = await factory.new('10', {});\n\n// Here we are creating an instance of the Contract class, which is used to interact with the deployed contract\ncontract = new Contract(address, UserAlice, api);\n")),(0,o.kt)("h3",{id:"contract"},"contract"),(0,o.kt)("p",null,"Contract is the main namespace for interacting with contracts. It contains all the functions that are related to contracts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const contract = new Contract(\n        address,\n        signer,\n        nativeAPI,\n)\n\ncontract.name() // get the name of the contract\n\ncontract.address() // get the address of the contract\n\ncontract.abi() // get the abi of the contract\n\ncontract.<namespace>.<functionName>(...args, options) // call a function from a namespace\n// namespace can be tx, query, events, etc.\n\ncontract.withSigner(signer)\n// change the signer of the contract in the current context,\n// basically it will create a new contract with the new signer\n\ncontract.withAddress(address)\n// change the address of the contract in the current context,\n// basically it will create a new contract with the new address\n// useful for proxy contracts\n\ncontract.withAPI(api)\n// change the api of the contract in the current context\n// basically it will create a new contract with the new api\n\n")),(0,o.kt)("h3",{id:"data"},"data"),(0,o.kt)("p",null,"Utility file. Contains all info about types. It's used in runtime to parse return values from contracts."),(0,o.kt)("h3",{id:"mixed-methods"},"mixed-methods"),(0,o.kt)("p",null,"This namespace contains both tx and query methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"contract.mixedMethods.<functionName>(...args, options)\n")),(0,o.kt)("h3",{id:"query"},"query"),(0,o.kt)("p",null,"This namepsace contains all query methods"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = contract.query.<functionName>(...args, options)\n\nconsole.log(result.value)\n")),(0,o.kt)("p",null,"You can also use it to get errors from contracts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    await contract.withSigner(UserBob).query.transfer(UserAlice.address, '10', []);\n} catch ({ _err }) {\n    console.log(_err);\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"console.log\n    { insufficientBalance: null }\n")),(0,o.kt)("h3",{id:"tx-sign-and-send"},"tx-sign-and-send"),(0,o.kt)("p",null,"This namespace is used send transactions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await contract.tx.<functionName>(...args, options)\n")),(0,o.kt)("h3",{id:"library"},"Library"),(0,o.kt)("p",null,"You can also use typechain-polkadot as a library. To use it, you need to import it in your code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Typechain} from '@727-ventures/typechain-polkadot/src/types/typechain';\nimport {testPathPatternToRegExp} from \"jest-util\";\n\nconst typechain = new Typechain();\n\ntypechain.loadDefaultPlugins();\n\ntypechain.run(\n    pathToInput,\n    pathToOutput\n)\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"plugins"},"Plugins"),(0,o.kt)("p",null,"Typechain-polkadot uses plugins to generate code. By default, it uses the following plugins:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"build-extrinsic ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/build-extrinsic"},"docs")),(0,o.kt)("li",{parentName:"ul"},"constructors ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/constructors"},"docs")),(0,o.kt)("li",{parentName:"ul"},"contract ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/contract"},"docs")),(0,o.kt)("li",{parentName:"ul"},"data ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/data"},"docs")),(0,o.kt)("li",{parentName:"ul"},"events ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/events"},"docs")),(0,o.kt)("li",{parentName:"ul"},"events-types ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/events-types"},"docs")),(0,o.kt)("li",{parentName:"ul"},"mixed-methods ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/mixed-methods"},"docs")),(0,o.kt)("li",{parentName:"ul"},"query ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/query"},"docs")),(0,o.kt)("li",{parentName:"ul"},"tx-sign-and-send ",(0,o.kt)("a",{parentName:"li",href:"/docs/Typechain/typechain-polkadot/Plugins/tx-sign-and-send"},"docs"))),(0,o.kt)("p",null,"You can also create your own plugins to add some custom logic to the typechain-polkadot. To do this, you need to create a class that implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"TypechainPlugin")," interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {TypechainPlugin} from '@727-ventures/typechain-polkadot/src/types/interfaces';\nimport {Abi} from \"@polkadot/api-contract\";\n\n/**\n * generates a contract file\n *\n * @param abi - The ABI of the contract\n * @param fileName - The name of the file to write to\n * @param absPathToOutput - The absolute path to the output directory\n * @param absPathToABIs - The absolute path to the ABIs directory\n */\nfunction generate(abi: Abi, fileName: string, absPathToOutput: string, absPathToABIs: string) {\n    console.log('Hello World!');\n}\n\nexport default class HelloWorldPlugin implements TypechainPlugin {\n\n    name: string = 'HelloWorld';\n    outputDir: string = 'HelloWorld';\n\n    generate(abi: Abi, fileName: string, absPathToABIs: string, absPathToOutput: string): void {\n        generate(abi, fileName, absPathToOutput, absPathToABIs);\n    }\n}\n")),(0,o.kt)("p",null,"Then you need to add your plugin to the list of plugins:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"typechain.loadPlugins(new MyPlugin());\n")),(0,o.kt)("p",null,"Or you can load them via cli:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx @727-ventures/typechain-polkadot --input path/to/abis --output path/to/output --plugins ./plugins-directory\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: if you're using the cli, every plugin should end with ",(0,o.kt)("inlineCode",{parentName:"p"},".plugin.ts")," and have default export of the plugin itself.")),(0,o.kt)("p",null,"Also you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"loadPluginsFromFiles")," method to load plugins from files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"typechain.loadPluginsFromFiles(\n    './plugins-directory'\n)\n")),(0,o.kt)("h2",{id:"example-of-plugins-usage"},"Example of plugins usage"),(0,o.kt)("p",null,"You can find an example of plugins usage in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/727-Ventures/typechain-polkadot/tree/master/examples"},"examples")," directory."))}d.isMDXComponent=!0}}]);