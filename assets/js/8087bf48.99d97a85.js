"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[9611],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=i(t),b=o,f=p["".concat(l,".").concat(b)]||p[b]||m[b]||a;return t?r.createElement(f,s(s({ref:n},u),{},{components:t})):r.createElement(f,s({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[p]="string"==typeof e?e:o,s[1]=c;for(var i=2;i<a;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},4705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:1,title:"AccessControl Enumerable"},s=void 0,c={unversionedId:"OpenBrush/smart-contracts/access-control/Extensions/enumerable",id:"OpenBrush/smart-contracts/access-control/Extensions/enumerable",title:"AccessControl Enumerable",description:"This example shows how you can reuse the implementation of AccessControl with AccessControlEnumerable extension, which enables an easier overview of access control roles.",source:"@site/docs/OpenBrush/smart-contracts/access-control/Extensions/enumerable.md",sourceDirName:"OpenBrush/smart-contracts/access-control/Extensions",slug:"/OpenBrush/smart-contracts/access-control/Extensions/enumerable",permalink:"/docs/OpenBrush/smart-contracts/access-control/Extensions/enumerable",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"AccessControl Enumerable"},sidebar:"tutorialSidebar",previous:{title:"Access Control",permalink:"/docs/OpenBrush/smart-contracts/access-control/"},next:{title:"Ownable",permalink:"/docs/OpenBrush/smart-contracts/ownable"}},l={},i=[{value:"Step 1: Add implemenation of AccessControlEnumerable",id:"step-1-add-implemenation-of-accesscontrolenumerable",level:2},{value:"Step 2: Define storage",id:"step-2-define-storage",level:2},{value:"Final code",id:"final-code",level:2}],u={toc:i},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/blob/main/contracts/src/access/access_control/access_control.rs"},"AccessControl")," with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/blob/main/contracts/src/access/access_control/extensions/enumerable.rs"},"AccessControlEnumerable")," extension, which enables an easier overview of access control roles."),(0,o.kt)("p",null,"First, you should implement basic version of ",(0,o.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/access-control/"},"AccessControl"),"."),(0,o.kt)("h2",{id:"step-1-add-implemenation-of-accesscontrolenumerable"},"Step 1: Add implemenation of AccessControlEnumerable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::contract]\n#[openbrush::implementation(AccessControl, AccessControlEnumerable)]\npub mod my_access_control {\n    ...\n')),(0,o.kt)("h2",{id:"step-2-define-storage"},"Step 2: Define storage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, Storage)]\npub struct Contract {\n    #[storage_field]\n    enumerable: enumerable::Data,\n}\n")),(0,o.kt)("h2",{id:"final-code"},"Final code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(AccessControl, AccessControlEnumerable)]\n#[openbrush::contract]\npub mod my_access_control {\n    use openbrush::traits::Storage;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        enumerable: enumerable::Data,\n    }\n\n    // You can manually set the number for the role.\n    // But better to use a hash of the variable name.\n    // It will generate a unique identifier of this role.\n    // And will reduce the chance to have overlapping roles.\n    const MINTER: RoleType = ink::selector_id!("MINTER");\n\n    impl Contract {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            let mut instance = Self::default();\n\n            let caller = Self::env().caller();\n            access_control::Internal::_init_with_admin(&mut instance, Some(caller));\n            // We grant minter role to caller in constructor, so he can mint/burn tokens\n            AccessControl::grant_role(&mut instance, MINTER, Some(caller)).expect("Should grant MINTER role");\n            assert_eq!(AccessControlEnumerable::get_role_member_count(&instance, MINTER), 1);\n\n            instance\n        }\n    }\n}\n')),(0,o.kt)("p",null,"And that's it! Your ",(0,o.kt)("inlineCode",{parentName:"p"},"AccessControl")," is now extended by the ",(0,o.kt)("inlineCode",{parentName:"p"},"AccessControlEnumerable")," extension and ready to use its functions!\nYou can check an example of the usage of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/blob/main/contracts/src/access/access_control/extensions/enumerable.rs"},"AccessControl Enumerable"),"."),(0,o.kt)("p",null,"You can also check the documentation for the basic implementation of ",(0,o.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/access-control/"},"AccessControl"),"."))}m.isMDXComponent=!0}}]);