"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[7909],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,s(s({ref:t},l),{},{components:n})):a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1,title:"PSP34 Metadata"},s=void 0,i={unversionedId:"OpenBrush/smart-contracts/PSP34/Extensions/metadata",id:"OpenBrush/smart-contracts/PSP34/Extensions/metadata",title:"PSP34 Metadata",description:"This example shows how you can reuse the implementation of PSP34 token with PSP34Metadata extension.",source:"@site/docs/OpenBrush/smart-contracts/PSP34/Extensions/metadata.md",sourceDirName:"OpenBrush/smart-contracts/PSP34/Extensions",slug:"/OpenBrush/smart-contracts/PSP34/Extensions/metadata",permalink:"/docs/OpenBrush/smart-contracts/PSP34/Extensions/metadata",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"PSP34 Metadata"},sidebar:"tutorialSidebar",previous:{title:"PSP34",permalink:"/docs/OpenBrush/smart-contracts/PSP34/"},next:{title:"PSP34 Mintable",permalink:"/docs/OpenBrush/smart-contracts/PSP34/Extensions/mintable"}},c={},p=[{value:"Step 1: Implement features",id:"step-1-implement-features",level:2},{value:"Step 2: Define storage",id:"step-2-define-storage",level:2},{value:"Step 3: Define constructor",id:"step-3-define-constructor",level:2},{value:"Final code",id:"final-code",level:2}],l={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp34"},"PSP34")," token with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/contracts/src/token/psp34/extensions/metadata.rs"},"PSP34Metadata")," extension."),(0,r.kt)("p",null,"First, you should implement basic version of ",(0,r.kt)("a",{parentName:"p",href:"/docs/OpenBrush/smart-contracts/PSP34/"},"PSP34"),"."),(0,r.kt)("h2",{id:"step-1-implement-features"},"Step 1: Implement features"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP34, PSP34Metadata)]\n#[openbrush::contract]\npub mod my_psp34_metadata {\n...\n')),(0,r.kt)("h2",{id:"step-2-define-storage"},"Step 2: Define storage"),(0,r.kt)("p",null,"Declare storage struct and declare the field related to the metadata module data structure.\nThen you need to derive the ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," trait and mark the corresponding field with\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"#[storage_field]")," attribute. Deriving this trait allows you to reuse the\n",(0,r.kt)("inlineCode",{parentName:"p"},"PSP34Metadata")," extension in your ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP34")," implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Default, Storage)]\n#[ink(storage)]\npub struct Contract {\n    #[storage_field]\n    psp34: psp34::Data,\n    #[storage_field]\n    metadata: metadata::Data,\n}\n")),(0,r.kt)("h2",{id:"step-3-define-constructor"},"Step 3: Define constructor"),(0,r.kt)("p",null,"Define constructor. Your ",(0,r.kt)("inlineCode",{parentName:"p"},"PSP34Metadata")," contract is ready!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'impl Contract {\n    /// A constructor which mints the first token to the owner\n    #[ink(constructor)]\n    pub fn new(id: Id, name: String, symbol: String) -> Self {\n        let mut instance = Self::default();\n\n        let name_key = String::from("name");\n        let symbol_key = String::from("symbol");\n        metadata::Internal::_set_attribute(&mut instance, id.clone(), name_key, name);\n        metadata::Internal::_set_attribute(&mut instance, id, symbol_key, symbol);\n\n        instance\n    }\n}\n')),(0,r.kt)("h2",{id:"final-code"},"Final code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[openbrush::implementation(PSP34, PSP34Metadata)]\n#[openbrush::contract]\npub mod my_psp34_metadata {\n    use openbrush::traits::Storage;\n\n    #[derive(Default, Storage)]\n    #[ink(storage)]\n    pub struct Contract {\n        #[storage_field]\n        psp34: psp34::Data,\n        #[storage_field]\n        metadata: metadata::Data,\n    }\n\n    impl Contract {\n        /// A constructor which mints the first token to the owner\n        #[ink(constructor)]\n        pub fn new(id: Id, name: String, symbol: String) -> Self {\n            let mut instance = Self::default();\n\n            let name_key = String::from("name");\n            let symbol_key = String::from("symbol");\n            metadata::Internal::_set_attribute(&mut instance, id.clone(), name_key, name);\n            metadata::Internal::_set_attribute(&mut instance, id, symbol_key, symbol);\n\n            instance\n        }\n    }\n}\n')),(0,r.kt)("p",null,"You can check an example of the usage of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Brushfam/openbrush-contracts/tree/main/examples/psp34_extensions/metadata"},"PSP34 Metadata"),"."))}m.isMDXComponent=!0}}]);