"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[7931],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>y});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var i=r.createContext({}),p=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(i.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,i=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=p(n),f=o,y=u["".concat(i,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(y,c(c({ref:e},l),{},{components:n})):r.createElement(y,c({ref:e},l))}));function y(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,c=new Array(a);c[0]=f;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s[u]="string"==typeof t?t:o,c[1]=s;for(var p=2;p<a;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},25:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},c="Constructors",s={unversionedId:"Typechain/typechain-polkadot/Plugins/constructors",id:"Typechain/typechain-polkadot/Plugins/constructors",title:"Constructors",description:"Used to deploy contracts, using different constructors.",source:"@site/docs/Typechain/typechain-polkadot/Plugins/constructors.md",sourceDirName:"Typechain/typechain-polkadot/Plugins",slug:"/Typechain/typechain-polkadot/Plugins/constructors",permalink:"/docs/Typechain/typechain-polkadot/Plugins/constructors",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"build-extrinsic",permalink:"/docs/Typechain/typechain-polkadot/Plugins/build-extrinsic"},next:{title:"Contract",permalink:"/docs/Typechain/typechain-polkadot/Plugins/contract"}},i={},p=[],l={toc:p},u="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"constructors"},"Constructors"),(0,o.kt)("p",null,"Used to deploy contracts, using different constructors."),(0,o.kt)("p",null,"Let's deploy the following contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[openbrush::contract]\npub mod my_psp22 {\n\n    // imports from openbrush\n    use openbrush::contracts::psp22::*;\n    use openbrush::traits::Storage;\n\n    #[ink(storage)]\n    #[derive(Default, Storage)]\n    pub struct Contract {\n        #[storage_field]\n        psp22: psp22::Data,\n    }\n\n    // Section contains default implementation without any modifications\n    impl PSP22 for Contract {}\n\n    impl Contract {\n        #[ink(constructor)]\n        pub fn new(initial_supply: Balance) -> Self {\n            let mut _instance = Self::default();\n            _instance._mint_to(_instance.env().caller(), initial_supply).expect("Should mint");\n            _instance\n        }\n    }\n}\n')),(0,o.kt)("p",null,"This contract has a constructor ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," with one argument ",(0,o.kt)("inlineCode",{parentName:"p"},"initial_supply"),".\nTo deploy this contract, you need to use the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Import here Constructors and Contract classes\n\n// Here we are creating an instance of the Constructors class, which is used to deploy contracts,\n// Constructors is typechain-generated class that contains all the constructors of the contract\nconst factory = new Constructors(api, UserAlice);\n\n// You can access to the different constructors using the name of the constructor, here we will use \"new\"\nconst {result, address} = await factory.new('10', {});\n\n// Here we are creating an instance of the Contract class, which is used to interact with the deployed contract\ncontract = new Contract(address, UserAlice, api);\n")))}d.isMDXComponent=!0}}]);