"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[4382],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||i;return t?r.createElement(d,a(a({ref:n},s),{},{components:t})):r.createElement(d,a({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4205:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:3,title:"Typechain-compiler package"},a="Typechain-Compiler",l={unversionedId:"Typechain/typechain-compiler",id:"Typechain/typechain-compiler",title:"Typechain-compiler package",description:"---",source:"@site/docs/Typechain/typechain-compiler.md",sourceDirName:"Typechain",slug:"/Typechain/typechain-compiler",permalink:"/docs/Typechain/typechain-compiler",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Typechain-compiler package"},sidebar:"tutorialSidebar",previous:{title:"Tx",permalink:"/docs/Typechain/typechain-polkadot/Plugins/tx-sign-and-send"},next:{title:"OBCE",permalink:"/docs/obce"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Config file",id:"config-file",level:3},{value:"Compiler",id:"compiler",level:3}],s={toc:p},u="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typechain-compiler"},"Typechain-Compiler"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Utility package for compiling smart contracts, and generating TypeScript definitions & runtime code for them."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"In your project install this package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D @727-ventures/typechain-compiler\n")),(0,o.kt)("p",null,"Now you can use it to compile smart contracts, and generate TS definitions & runtime code for them. To use typechain-compiler you need to create a config file, and pass it to the compiler."),(0,o.kt)("h3",{id:"config-file"},"Config file"),(0,o.kt)("p",null,"We need to create a config file, that will contain all the information about the project, and the contracts that we want to compile.\nConfig file should be in ",(0,o.kt)("inlineCode",{parentName:"p"},".json")," format, and should contain the following fields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Config {\n    projectFiles: string[];\n    skipLinting : boolean;\n    artifactsPath : string;\n    typechainGeneratedPath : string;\n    isWorkspace ?: boolean;\n    workspacePath ?: string;\n}\n")),(0,o.kt)("p",null,"Also you can override the config value via CLI arguments."),(0,o.kt)("h3",{id:"compiler"},"Compiler"),(0,o.kt)("p",null,"To compile your project, and generate TS definitions & runtime code for it, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx @727-ventures/typechain-compiler --config path/to/config.json\n")),(0,o.kt)("p",null,"Also you can provide additional arguments to the compiler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'Options:\n      --version            Show version number                         [boolean]\n  -c, --config             Config file path\n                                  [string] [required] [default: "./config.json"]\n  -r, --release            Compile with release\n                                           [boolean] [required] [default: false]\n      --noCompile, --nc    Compile         [boolean] [required] [default: false]\n      --noTypechain, --nt  Compile typechain code\n                                           [boolean] [required] [default: false]\n  -h, --help               Show help                                   [boolean]\n')))}f.isMDXComponent=!0}}]);